void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Function to heapify a subtree rooted at index i
void heapify(int arr[], int n, int i) {                                                      
    int largest = i;         // Initialize largest as root                                  
    int left = 2 * i + 1;    // Left child                                                  
    int right = 2 * i + 2;   // Right child                                                 
    // If left child is larger than root
    if (left < n && arr[left] > arr[largest]) {                                             
        largest = left;
    }

    // If right child is larger than largest so far
    if (right < n && arr[right] > arr[largest]) {                                           
        largest = right;
    }

    // If largest is not root, swap and recursively heapify the affected subtree
    if (largest != i) {                                                                      
        swap(&arr[i], &arr[largest]);
        heapify(arr, n, largest);                                                           
    }
}

T(n)=T(2n/3)+O(1)(comparaison left and right and racine et neoud apres on permute)
T(n)=O(log(n))

// Main function to perform Heap Sort
void heapSort(int arr[], int n) {
    // Build heap (rearrange array)                             
    for (int i = n / 2 - 1; i >= 0; i--) {                                         
        heapify(arr, n, i);                                       
    }
    //le nombre max de neoud = n/2^hight+1    !!height =nb feuilles a chaque niveau
    T(n)=âˆ‘h=0->long(n)((n/2^h+1)*o(h))=o(n)

    // Extract elements from the heap one by one
    for (int i = n - 1; i > 0; i--) {                           
        // Move the current root to the end
        swap(&arr[0], &arr[i]);                                                    

        // Call max heapify on the reduced heap
        heapify(arr, i, 0);                                     
    }
    //heap complexite = comp de build heapify + l'ecution de la boucle de 2 a n de heapify
    T(n)=O(n)+(n-1)O(log(n))=O(nlog(n))
}